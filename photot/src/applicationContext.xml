<?xml version="1.0" encoding="UTF-8"?>
<!--创建配置文件,并导入约束(4个)
       beans|context|aop|tx        -->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
							http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
							http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
							http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd ">




    <!-- 核心事务   管理器 -->
    <bean name="transactionManager" class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <!--因为事务管理需要 session  所以需要注入sessionFactory 打开 session-->
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!-- 开启注解事务 -->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>

    <!-- 配置通知
    <tx:advice id="txAdvice" transaction-manager="transactionManager" >
        <tx:attributes>
            <tx:method name="save*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="persist*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="update*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="modify*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="delete*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="remove*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
            <tx:method name="get*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
            <tx:method name="find*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="true" />
            <tx:method name="*" isolation="REPEATABLE_READ" propagation="REQUIRED" read-only="false" />
        </tx:attributes>
    </tx:advice>

    配置将通知织入目标对象

    配置切点
    配置切面


    <aop:config>
        <aop:pointcut expression="execution(* service.*ServiceImpl.*(..))" id="txPc"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPc" />
    </aop:config>
    -->


    <!-- ========================================================================================= -->



<!--读取db.properties文件-->
    <!--<context:property-placeholder location="classpath:db.properties"/>-->
    <!--配置C3P0连接池-->
    <bean name="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="jdbc:mysql:///photo" ></property>
        <property name="driverClass" value="com.mysql.jdbc.Driver" ></property>
        <property name="user" value="root" ></property>
        <property name="password" value="zhangleiO0" ></property>
    </bean>

    <!--将SessionFactory配置到Spring容器中-->
    <!--加载配置方案1:仍然使用外部的hibernate.cfg.xml配置信息
    <bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
    </bean>
    -->

    <!--加载配置方案2:在spring配置中放置hibernate配置信息-->
    <bean name="sessionFactory" class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="hibernateProperties">
            <props>
                <!--  必选配置 s-->
                <!--<prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>-->
                <!--<prop key="hibernate.connection.url">jdbc:mysql:///crm_32</prop>-->
                <!--<prop key="hibernate.connection.username">root</prop>-->
                <!--<prop key="hibernate.connection.password">zhangleiO0</prop>-->
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>

                <!--  可选配置 -->
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
            </props>
        </property>
        <!-- 引入orm元数据,指定orm元数据所在的包路径,spring会自动读取包中的所有配置 -->
        <property name="mappingDirectoryLocations" value="classpath:domain" ></property>
    </bean>


    <!-- 方案一   action
    <bean name="userAction" class="action.UserAction"></bean>     -->

    <!-- 方案二   action -->
    <!-- 注意:Action对象作用范围一定是多例的.这样才符合struts2架构-->
    <bean name="checkImg" class="web.action.codeImage.checkImgAction" scope="prototype" >

    </bean>
    <bean name="userAction" class="web.action.UserAction" scope="prototype">
        <property name="userService" ref="userService"></property>
    </bean>
    <bean name="adminAction" class="web.action.AdminAction" scope="prototype">
        <property name="adminService" ref="adminService"></property>
    </bean>
    <bean name="eventsAction" class="web.action.EventsAction" scope="prototype">
        <property name="eventsService" ref="eventsService"></property>
    </bean>


    <bean name="userService" class="service.UserServiceImpl">
        <property name="ud" ref="userDao"></property>
    </bean>
    <bean name="adminService" class="service.AdminServiceImpl">
        <property name="adminDao" ref="adminDao"></property>
    </bean>
    <bean name="eventsService" class="service.EventsServiceImpl">
        <property name="eventsDao" ref="eventsDao"></property>
    </bean>


    <bean name="userDao" class="dao.UserDaoImpl">
        <!--使用HibernateTemplate需要注入sessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean name="adminDao" class="dao.AdminDaoImpl">
        <!--使用HibernateTemplate需要注入sessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <bean name="eventsDao" class="dao.EventsDaoImpl">
        <!--使用HibernateTemplate需要注入sessionFactory -->
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>





</beans>
